{"version":3,"file":"serialize.js","sources":["../src/node_modules/serialize.js"],"sourcesContent":["\n// IMPORTS /////////////////////////////////////////////////////////////////////\n\nimport _      from 'lodash';\nimport jsonSS from 'json-stringify-safe';\n\n// PATTERNS ////////////////////////////////////////////////////////////////////\n\nconst stackDelim = /\\n\\s*/g;\n\n// UTIL ////////////////////////////////////////////////////////////////////////\n\nconst pass = (key, val) => val;\n\nconst isNewIterable = val => {\n\treturn (\n\t\t(Map && val instanceof Map) ||\n\t\t(Set && val instanceof Set) ||\n\t\t(WeakMap && val instanceof WeakMap) ||\n\t\t(WeakSet && val instanceof WeakSet)\n\t);\n\n\t// Though it might be a nice touch to spread generators too, it’d be way too\n\t// presumptuous (could have side effects, could be infinite). As it is,\n\t// functions and generators both just disappear into the night, though the\n\t// user can change this with a custom replacer.\n};\n\n// BUILD SERIALIZER ////////////////////////////////////////////////////////////\n\nexport const build = ({ flatten, flattenArrays, replacer=pass, withStack }) => {\n\t// We augment the default JSON.stringify serialization behavior with\n\t// handling for a number of values that otherwise return nonsense values or\n\t// nothing at all. In addition to numeric outliers, a number of other basic\n\t// JS objects (post-ES6 especially) aren’t in the JSON spec, presumably\n\t// because it would have been too obvious that we were tricking everyone\n\t// else into making our lives easier. This augmented behavior is useful in a\n\t// JS environment since we’re not apt to think ‘I am going to log JSON!’; we\n\t// just want to dump objects in the log hole.\n\n\t// If the user supplied a custom replacer, it is applied first.\n\n\tconst replace = _.flow(replacer, val => {\n\t\t// Prototypeless object\n\t\tif (_.isObject(val) && !Object.getPrototypeOf(val))\n\t\t\treturn val;\n\n\t\t// Trouble primitives\n\t\tif (_.isNaN(val))              return 'NaN';\n\t\tif (val === Infinity)          return 'Infinity';\n\t\tif (val === -Infinity)         return '-Infinity';\n\t\tif (1 / val === -Infinity)     return '-0';\n\t\tif (typeof val == 'symbol')    return val.toString();\n\n\t\t// Trouble objects\n\t\tif (_.isError(val))            return errReplacer(val, withStack);\n\t\tif (_.isArguments(val))        return _.toArray(val);\n\t\tif (_.isRegExp(val))           return val.toString();\n\t\tif (isNewIterable(val))        return [ ...val ];\n\n\t\t// - Error, regexp, maps and sets would have been `{}`\n\t\t// - Arguments would have been `{\"0\": \"arg1\", \"1\": \"arg2\" }`\n\t\t// - NaN and +/-Infinity would have been `null` (wtf?)\n\t\t// - -0 would have been 0 (yes I’m being overly thorough)\n\t\t// - Symbols would have been undefined\n\n\t\t// Note: numeric literals in base-whatever are just standard decimal\n\t\t// integers internally, so 0b1 will be \"1\" -- the original notation\n\t\t// can’t be preserved. JSON does preserve exponent suffixes though.\n\n\t\treturn val;\n\t});\n\n\t// json-stringify-safe is a JSON.stringify wrapper that takes care of\n\t// circular references.\n\n\tconst serialize = _.partial(jsonSS, _, replace);\n\n\treturn flatten ? flat(serialize, flattenArrays) : serialize;\n};\n\nconst errReplacer = (val, withStack) => {\n\n\t// Errors do not serialize nicely with JSON.stringify because none of the\n\t// properties of interest are ‘own’ properties.\n\n\tconst err = { name: val.name || 'Error', message: val.message };\n\n\t// Though custom errors could have some own properties:\n\n\tfor (const prop in val) err[prop] = val[prop];\n\n\t// For the stack, we convert to an array for the sake of readability.\n\n\tif (withStack) err.stack = val.stack && val.stack.split(stackDelim);\n\n\treturn err;\n};\n\nconst flat = (serialize, arraysToo) => {\n\treturn (obj) => {\n\t\tobj = JSON.parse(serialize(obj));\n\n\t\tif (!_.isObject(obj)) return obj;\n\n\t\tconst flatObj = _.reduce(obj, function _flat(target, val, key) {\n\n\t\t\tconst keyContext = this.slice();\n\n\t\t\tkeyContext.push(key);\n\n\t\t\tkey = keyContext.join('.');\n\n\t\t\tif (!_.isObject(val))\n\t\t\t\ttarget[key] = val;\n\n\t\t\telse if (!arraysToo && _.isArray(val))\n\t\t\t\ttarget[key] = val.map(val => {\n\t\t\t\t\tif (!_.isObject(val)) return val;\n\n\t\t\t\t\treturn _.reduce(val, _flat, {}, []);\n\t\t\t\t});\n\n\t\t\telse\n\t\t\t\t_.reduce(val, _flat, target, keyContext);\n\n\t\t\treturn target;\n\t\t}, {}, []);\n\n\t\treturn jsonSS(flatObj);\n\t};\n};\n"],"names":[],"mappings":"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"}